#!/usr/bin/with-contenv bash
set -eo pipefail

# Trick GYB into storing data in the docker volume. Make sure it ends in '/'
export STATICX_PROG_PATH=/config/

# Parse env variables into GYB command
if [ -n "${MEM_LIMIT}" ]; then
  MEM_LIMIT=" --memory-limit ${MEM_LIMIT}"
fi

if [ -n "${EMAIL}" ]; then
  EMAIL=" --email ${EMAIL}"
fi

if [ -n "${DEBUG}" ]; then
  DEBUG=" --debug"
fi

LOCAL_FOLDER=" --local-folder ${DEST:-/config/data}"

CMD="python3 /app/src/gyb.py $@${MEM_LIMIT}${EMAIL}${LOCAL_FOLDER}${DEBUG}"
echo "[Running] ${CMD}"

# Make sure jobs aren't competing with each other. Placing here so we output
# what command we were trying to run
exec 100< "$(realpath $0)"
flock -n 100 || { \
  echo "ERROR: /app/gyb is already running in another (long running?) process" \
  && exit 1; \
}

PRE_CMD=""
POST_CMD=""

# Run as container user
if [ `id -u` = "0" ]; then
  [ -n "${DEBUG}" ] && echo "[Debug] Dropping root privileges..."
  PRE_CMD="s6-setuidgid abc "
fi

# LSIO/s6 sets this by default for background services (like cron), but we want
# it for ALL runs of GYB since auth/senstive token files will likely be
# generated by manual docker runs
if [[ -f /var/run/s6/container_environment/UMASK ]]; then
  PRE_CMD="${PRE_CMD}umask $(cat /var/run/s6/container_environment/UMASK) "
fi

FULL_CMD="${PRE_CMD}${CMD}${POST_CMD}"

[ -n "${DEBUG}" ] && echo "[Debug] Full command: ${FULL_CMD}"

# Away we go...
exec ${FULL_CMD}